using Microsoft.Extensions.Configuration;
using Phoenix.Core.Infrastructure;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection;

namespace Phoenix.Core.Repositories
{
    public class BaseRepository
    {
        public readonly string phoenixSchema = "dbo";
        public readonly string defaultPkColumnName = "Id";

        private readonly IConfiguration configuration;

        public BaseRepository(IConfiguration configuration)
        {
            this.configuration = configuration;
        }

        /// <summary>
        /// Executes an insert statement against the schema defined by the T TableAttribute.Schema.
        /// </summary>
        /// <param name="objectToInsert"></param>
        /// <returns>The inserted entity</returns>
        protected T Insert<T>(T objectToInsert)
        {
            var entityType = typeof(T);
            var entityName = entityType.Name;
            
            var (columnsString, parameterString, param) = PrepareInsert(objectToInsert);

            var sql = $"INSERT INTO [{phoenixSchema}].[{entityName}] ({columnsString}) OUTPUT Inserted.* VALUES({parameterString})";


            using (var sqlConnection = new PhoenixSqlConnection(configuration))
            {
                return sqlConnection.Query<T>(sql: sql, param: param).Single();
            }

        }


        private (string columnsString, string parameterString, Dictionary<string, object> parameters) PrepareInsert<T>(T objectToInsert)
        {
            var properties = objectToInsert.GetType().GetProperties();

            var columnsString = "";
            var parameterString = "";

            var parameters = new Dictionary<string, object>();

            for (var i = 0; i < properties.Length; i++)
            {
                var columnAttribute = properties[i].GetCustomAttribute<ColumnAttribute>();

                // skip fields without [Column] attribute
                if (columnAttribute == null)
                {
                    continue;
                }

                // sometimes the property name of the model is different than the column name in the db table
                var dbColumnName = columnAttribute.Name ?? properties[i].Name;

                //We skip the Id column as it is automatically generated by the db
                if (dbColumnName == defaultPkColumnName)
                {
                    continue;
                }

                parameters.Add(dbColumnName, properties[i].GetValue(objectToInsert));

                columnsString += $"{(string.IsNullOrEmpty(columnsString) ? string.Empty : ",")}[{dbColumnName}]";
                parameterString += $"{(string.IsNullOrEmpty(parameterString) ? string.Empty : ",")} @{dbColumnName}";

            }

            return (columnsString, parameterString, parameters);
        }


        protected T? GetSingleOrDefault<T>(long id)
        {
            var sql = $"SELECT TOP 1 * FROM [{phoenixSchema}].[{typeof(T).Name}] WHERE Id = {id}";
            using (var sqlConnection = new PhoenixSqlConnection(configuration))
            {
                return sqlConnection.Query<T>(sql: sql).SingleOrDefault();
            }
        }

        /// <summary>
        /// Executes a select query against the schema defined by the T TableAttribute.Schema.
        /// </summary>
        /// <param name="where">Optional. The where condition. (WITHOUT the WHERE word).</param>
        /// <param name="whereParam">Optional. The parameter used by the where condition.</param>
        /// <returns>All the records returned by the select statement</returns>
        protected IEnumerable<T> GetAll<T>(string? where = null, object? whereParam = null)
        {
            var sql = $"SELECT * FROM [{phoenixSchema}].[{typeof(T).Name}]";

            if (!string.IsNullOrEmpty(where))
            {
                sql += $" WHERE {where}";
            }

            using (var sqlConnection = new PhoenixSqlConnection(configuration))
            {
                return sqlConnection.Query<T>(sql: sql, param: whereParam);
            }
        }

        /// <summary>
        /// Deletes one entity by its Id.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="id">The identifier of the entity</param>
        protected void Delete<T>(long id)
        {
            var entityType = typeof(T);
            var entityName = entityType.Name;

            var sql = $"DELETE FROM [{phoenixSchema}].[{entityName}] WHERE Id = @Id";
            var param = new { Id = id };

            using (var sqlConnection = new PhoenixSqlConnection(configuration))
            {
                sqlConnection.Query<T>(sql: sql, param: param);
            }
        }

        /// <summary>
        /// Execute the passed statement.
        /// </summary>
        /// <param name="sql">The sql statement to execute against the db</param>
        /// <param name="param">The object passed to map the parameters of the statement</param>
        /// <returns>The retrieved entity or an empty enumerable</returns>
        protected IEnumerable<T> Query<T>(string sql, object? param = null)
        {
            using (var sqlConnection = new PhoenixSqlConnection(configuration))
            {
                return sqlConnection.Query<T>(sql: sql, param: param);
            }
        }
    }
}
